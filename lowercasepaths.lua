------------------------------------------------------------------------------
--                   IMPORTANT:  DO NOT EDIT THIS FILE!!!                   --
------------------------------------------------------------------------------
-- This file relies on other versions of itself being the same.             --
-- If you need something in this file changed, please let the creator know! --
------------------------------------------------------------------------------

-- CODE STARTS BELOW --


-------------
-- version --
-------------
local fileVersion = 1

--prevent older/same version versions of this script from loading
if LowercasePaths and LowercasePaths.Version >= fileVersion then

	return LowercasePaths

end

if not LowercasePaths then

	LowercasePaths = {}
	LowercasePaths.Version = fileVersion
	
elseif LowercasePaths.Version < fileVersion then

	local oldVersion = LowercasePaths.Version

	LowercasePaths.Version = fileVersion

end

LowercasePaths.OldRequire = require
function LowercasePaths.NewRequire(toRequire, ...)

	toRequire = string.lower(toRequire)
	
	local luaCheckStart, luaCheckEnd = string.find(toRequire, ".lua", -4)
	if luaCheckStart then
		toRequire = string.sub(toRequire, 0, luaCheckStart-1)
	end
	
	local fileLoaded, returned = pcall(LowercasePaths.OldRequire, toRequire, ...)
	
	if fileLoaded then
		return returned
	else
		error(returned, 2)
	end
	
end
require = LowercasePaths.NewRequire

LowercasePaths.OldDoFile = dofile
function LowercasePaths.NewDoFile(toLoad, ...)

	toLoad = string.lower(toLoad)
	
	local fileLoaded, returned = pcall(LowercasePaths.OldDoFile, toLoad, ...)
	
	if fileLoaded then
		return returned
	else
		error(returned, 2)
	end
	
end
dofile = LowercasePaths.NewDoFile
